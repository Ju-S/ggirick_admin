<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Employee">
    <!-- 로그인용 id만 가져오는 select -->
    <select id="getById" resultType="com.kedu.ggirick_admin_backend.dto.employee.EmployeeDTO">
        SELECT * FROM employee WHERE id = #{id}
    </select>

    <!-- 직원 정보 가져오기 /me, detail -->
    <select id="getEmployeeInfo" resultType="com.kedu.ggirick_admin_backend.dto.employee.EmployeeDTO">
        SELECT * FROM employee WHERE id = #{id}
    </select>

    <!-- 직원 목록 가져오기 -->
    <select id="getAllEmployeeList" resultType="com.kedu.ggirick_admin_backend.dto.employee.EmployeeDTO">
        SELECT * FROM employee;
    </select>

    <!-- 올해 마지막 사번 조회 -->
    <select id="getLastEmployeeId" parameterType="string" resultType="string">
        SELECT MAX(id)
        FROM EMPLOYEE
        WHERE SUBSTR(id, 3, 2) = #{yearSuffix}
    </select>

    <!-- 직원 등록 + 부서, 조직, 권한, 재직 상태 반영 -->
    <insert id="insertEmployee">
        INSERT INTO employee (
        id, pw, name, phone, extension, email, profile_url
        ) VALUES (
        #{id, jdbcType=VARCHAR},
        #{pw, jdbcType=VARCHAR},
        #{name, jdbcType=VARCHAR},
        #{phone, jdbcType=VARCHAR},
        #{extension, jdbcType=VARCHAR},
        #{email, jdbcType=VARCHAR},
        #{profile_url, jdbcType=VARCHAR}
        )
    </insert>
    <!-- 직원-부서 등록 -->
    <insert id="insertEmployeeDepartment">
        INSERT INTO employee_department (
        id,
        employee_id,
        department_code
        ) VALUES (
        employee_department_seq.NEXTVAL,
        #{id},
        #{department_code}
        )
    </insert>

    <!-- 재직 상태 등록 (기본 active) -->
    <insert id="insertEmploymentStatus">
        INSERT INTO employment_status (
        seq,
        emp_id,
        employment_status,
        change_date
        ) VALUES (
        employment_status_seq.NEXTVAL,
        #{id},
        'active',
        SYSDATE
        )
    </insert>

    <!-- 직원-직급 등록 -->
    <insert id="insertEmployeeJob">
        INSERT INTO employee_job (
        id,
        employee_id,
        job_code
        ) VALUES (
        employee_job_seq.NEXTVAL,
        #{id},
        #{job_code}
        )
    </insert>

    <!-- 직원-조직 등록 -->
    <insert id="insertEmployeeOrganization">
        INSERT INTO employee_organization (
        id,
        employee_id,
        organization_code
        ) VALUES (
        employee_organization_seq.NEXTVAL,
        #{id},
        #{organization_code}
        )
    </insert>

    <!-- 직원 권한 등록 (기본 authority_id = 1 / USER) -->
    <insert id="insertEmployeeAuthority">
        INSERT INTO employee_authority (
        id,
        employee_id,
        authority_id
        ) VALUES (
        employee_authority_seq.NEXTVAL,
        #{id},
        1
        )
    </insert>

    <!-- 임시(초기)비밀번호 변경 여부 확인용 테이블 등록 -->
    <insert id="insertPasswordReset">
        INSERT INTO password_reset (emp_id)
        VALUES (#{id})
    </insert>

    <!-- 직원 삭제 -->
    <delete id="deleteById">
        DELETE FROM employee WHERE id = #{id}
    </delete>

    <!-- 직원 정보 수정 -->
    <update id="updateById">
        UPDATE employee SET
        phone = #{phone},
        extension = #{extension},
        email = #{email, jdbcType=VARCHAR},
        profile_url = #{profile_url, jdbcType=VARCHAR}
        WHERE id = #{id}
    </update>

    <!-- 비밀번호 변경 -->
    <update id="updatePassword" parameterType="com.kedu.ggirick_admin_backend.dto.employee.EmployeeDTO">
        UPDATE employee
        SET password = #{password}
        WHERE ID = #{id}
    </update>
</mapper>